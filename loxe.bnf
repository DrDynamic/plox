
program             ::= declaration* EOF ;

// statements
declaration         ::= funcDeclaration | varDeclaration | statement ;
funcDeclaration     ::= "function" function ;
function            ::= IDENTIFIER "(" parameters? ")" blockStatement ;
parameters          ::= IDENTIFIER ( "," IDENTIFIER )* ;
varDeclaration      ::= "var" IDENTIFIER ( "=" expression )? ";"? ;

statement           ::= expressionStatement
                      | forStatement
                      | ifStatement
                      | whileStmt
                      | completionStatement
                      | blockStatement;
forStatement        ::= "for" "(" ( varDeclaration | expressionStatement | ";" )
                                expression? ";"
                                expression? ")" statement ;
whileStmt           ::= "while" "(" expression ")" statement ;
ifStatement         ::= "if" "(" expression ")" statement ( "else" statement )? ;
completionStatement ::= ("continue" | "break") ";"? ;
expressionStatement ::= expression ";"?;
blockStatement      ::= "{" declaration* "}" ;

// expressions
expression          ::= ternary;
ternary             ::= assignment ( "?" assignment ":" assignment )* ;
assignment          ::= IDENTIFIER "=" assignment | logic_or ;
logic_or            ::= logic_and ( "or" logic_and )* ;
logic_and           ::= comma ( "and" comma )* ;
comma               ::= equality ( "," equality )* ;
equality            ::= comparison ( ( "!=" | "==" ) comparison )* ;
comparison          ::= term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term                ::= factor ( ( "-" | "+" ) factor )* ;
factor              ::= unary ( ( "/" | "*" ) unary )* ;
unary               ::= ( "!" | "-" ) unary | call ;
call                ::= primary ( "(" arguments? ")" )* ;
arguments           ::= expression ( "," expression )* ;
primary             ::= NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")" | IDENTIFIER ;



// Lexical grammar
NUMBER              ::= DIGIT+ ("." DIGIT+)?
STRING              ::= "\"" <any char except "\"">* "\""
IDENTIFIER          ::= ALPHA (ALPHA | DIGIT)*
ALPHA               ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p"
                      | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z"
                      | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P"
                      | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "_"
DIGIT               ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
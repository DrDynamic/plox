<?php

namespace Lox\Runtime\Types;

use Lox\Runtime\Errors\InvalidMathError;
use Lox\Scan\Token;
use Lox\Scan\TokenType;

class NilType extends Type
{
    #[\Override] public static function getType(): LoxType
    {
        return LoxType::NIL;
    }

    public function __construct(
        public readonly null $value = null
    )
    {
    }

    #[\Override] public function cast(LoxType $toType): Type
    {
        switch ($toType) {
            case LoxType::Boolean:
                return new BooleanType(false);
            case LoxType::String:
                return new StringType('nil');
        }
        return parent::cast($toType); // TODO: Change the autogenerated stub
    }

    #[\Override] public function compare(Type $value, Token $operatorToken): Type
    {
        switch ($operatorToken->type) {
            case TokenType::EQUAL_EQUAL:
                if ($value::getType() == LoxType::NIL) return new BooleanType(true);
            case TokenType::BANG_EQUAL:
                if ($value::getType() == LoxType::NIL) return new BooleanType(false);
            case TokenType::GREATER:
            case TokenType::GREATER_EQUAL:
                return new BooleanType(true);
            case TokenType::LESS:
            case TokenType::LESS_EQUAL:
                return new BooleanType(false);
        }

        return parent::compare($value, $operatorToken);
    }

    #[\Override] public function calc(Type $value, Token $operatorToken): Type
    {
        throw new InvalidMathError($operatorToken, "Arithmetic actions with nil are not allowed");
    }


}
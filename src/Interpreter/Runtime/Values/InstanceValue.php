<?php

namespace src\Interpreter\Runtime\Values;

use src\AST\Expressions\Expression;
use src\AST\Statements\Statement;
use src\Interpreter\Runtime\Errors\RuntimeError;
use src\Interpreter\Runtime\LoxType;
use src\Interpreter\Runtime\Util\FieldDefinition;
use src\Resolver\LoxClassPropertyVisibility;
use src\Scaner\Token;
use src\Services\IdService;

class InstanceValue extends BaseValue implements GetAccess, SetAccess
{

    public readonly int $id;

    public function __construct(
        public readonly ClassValue $class,
        private array              $fields = [])
    {
        $this->id = dependency(IdService::class)->createId();
    }

    public function getType(): LoxType
    {
        return LoxType::Instance;
    }

    public function cast(LoxType $toType, Expression|Statement $cause): BaseValue
    {
        if ($toType == LoxType::String) {
// TODO: add reference to file / line?
            $name = $this->class->getName() ?? "anonymous";
            return new StringValue("<instance of {$name}>");
        }

        return parent::cast($toType, $cause); // TODO: Change the autogenerated stub
    }

    public function getOrFail(Token $name)
    {
        $property = $this->get($name);
        throw_if($property === null, new RuntimeError($name, "Undefined propery '$name->lexeme'"));

        return $property;
    }

    public function get(Token $name) {
        if (isset($this->fields[$name->lexeme])) {
            return $this->fields[$name->lexeme];
        }

        $method = $this->class->getMethod($name->lexeme);
        if ($method !== null) {
            return $method->bindInstance($this);
        }

        return null;
    }

    public function set(Token $name, Value $value): Value
    {
        if (!isset($this->fields[$name->lexeme])) {
            $this->fields[$name->lexeme] = new FieldDefinition(LoxClassPropertyVisibility::PUBLIC, $value);
            return $value;
        } else {
            return $this->fields[$name->lexeme]->value = $value;
        }
    }
}